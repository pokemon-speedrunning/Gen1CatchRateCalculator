{"version":3,"sources":["advanced.js"],"names":["gameSpecificCycleCounts","RB","Y","gameRoll2Counts","actualRateBar","$","intendedRateBar","loadingSpinner","setRateBar","progressElement","percent","parseFloat","toFixed","find","html","css","attr","className","getJsonValue","$element","JSON","parse","val","getIntValue","parseInt","bitCount","n","toString","match","length","on","removeClass","game","ball","catchRate","currentHP","maxHP","status","currentHPModifier","c1","ballFactor","c2","hpFactor","Math","min","catchRateData","ballRerollCutoff","ballReroll1","reroll1","ballReroll2","reroll2","reroll1Count","reroll2Count","roll2Count","includes","ballName","Promise","resolve","reject","catchRateWorker","Worker","onmessage","e","data","postMessage","then","result","actualRate","intendedRate","addClass"],"mappings":"AAAA,MAAMA,wBAA0B,CAC5BC,GAAI,CAAC,IAAK,KACVC,EAAG,CAAC,IAAK,MAEPC,gBAAkB,CACpBF,GAAI,EACJC,EAAG,KAEP,IAAIE,cAAgBC,EAAE,oBAClBC,gBAAkBD,EAAE,sBACpBE,eAAiBF,EAAE,mBAEvB,SAASG,WAAWC,EAAiBC,GACjCA,EAAUC,WAAWD,GAASE,QAAQ,GACtCH,EAAgBI,KAAK,UAAUC,KAAQJ,EAAH,KACpCD,EAAgBI,KAAK,iBAAiBE,IAAI,QAAYL,EAAH,KAAeM,KAAK,gBAAiBN,GAAS,GAAGO,UAAY,iBAAgBP,GAAW,GAAK,aAAe,aAGnK,SAASQ,aAAaC,GAClB,OAAOC,KAAKC,MAAMF,EAASG,OAG/B,SAASC,YAAYJ,GACjB,OAAOK,SAASL,EAASG,OAG7B,SAASG,SAAUC,GACf,OAAOA,EAAEC,SAAS,GAAGC,MAAM,MAAMC,OAGrCxB,EAAE,eAAeyB,GAAG,SAAS,WACzBvB,eAAewB,YAAY,UAC3B,MAAMC,EAAO3B,EAAE,SAASiB,MAClBW,EAAOf,aAAab,EAAE,UACtB6B,EAAYX,YAAYlB,EAAE,eAC1B8B,EAAYZ,YAAYlB,EAAE,eAC1B+B,EAAQb,YAAYlB,EAAE,WACtBgC,EAASd,YAAYlB,EAAE,YAEvBiC,EAAqBH,EAAY,GAAM,EAC7C,IAAII,EAAgB,IAARH,EAAeH,EAAKO,YAAe,EAC3CC,EAAMF,EAAKD,GAAsB,EACjCI,EAAWC,KAAKC,IAAIN,EAAoB,EAAIG,EAAKF,EAAI,KACzD,MAAMM,EAAgB,CAClBX,UAAcA,EACdY,iBAAqBb,EAAKa,iBAC1BC,YAAed,EAAKe,QACpBC,YAAehB,EAAKiB,QACpBb,OAAWA,EACXK,SAAaA,EACbS,aAAiBnD,wBAAwBgC,GAAM,GAC/CoB,aAAiBpD,wBAAwBgC,GAAM,GAC/CqB,WAAelD,gBAAgB6B,GACG,KAA/BP,SAASc,GAAMd,SAASgB,IACzB,IAAiB,KAAXJ,GAAiB,IAAiB,KAAXA,GAC7B,MAAQ,GAAM,CAAC,aAAc,eAAeiB,SAASrB,EAAKsB,UAAa,IAAM,eAAiBtB,EAAKsB,WAEpF,IAAIC,QAAQ,CAACC,EAASC,KACvC,MAAMC,EAAkB,IAAIC,OAAO,yBACnCD,EAAgBE,UAAY,SAAUC,GAClCL,EAAQK,EAAEC,OAEdJ,EAAgBK,YAAYnB,KAGnBoB,KAAKC,IACd,IAAIC,EAAaD,EAAO,GACpBE,EAAeF,EAAO,GAC1B3D,eAAe8D,SAAS,UACxB7D,WAAWJ,cAAe+D,EAAa,UACvC3D,WAAWF,gBAAiB,IAAM8D","file":"../js/advanced.js","sourcesContent":["const gameSpecificCycleCounts = {\r\n    RB: [520, 564],\r\n    Y: [516, 560]\r\n}\r\nconst gameRoll2Counts = {\r\n    RB: 0,\r\n    Y: 152\r\n}\r\nvar actualRateBar = $('.actualRateGroup');\r\nvar intendedRateBar = $('.intendedRateGroup');\r\nvar loadingSpinner = $('.spinner-border');\r\n\r\nfunction setRateBar(progressElement, percent) {\r\n    percent = parseFloat(percent).toFixed(2);\r\n    progressElement.find('p.rate').html(`${percent}%`);\r\n    progressElement.find('.progress-bar').css(\"width\", `${percent}%`).attr(\"aria-valuenow\", percent)[0].className = `progress-bar ${percent >= 50 ? 'bg-success' : 'bg-danger'}`;\r\n}\r\n\r\nfunction getJsonValue($element) {\r\n    return JSON.parse($element.val());\r\n}\r\n\r\nfunction getIntValue($element) {\r\n    return parseInt($element.val());\r\n}\r\n\r\nfunction bitCount (n) {\r\n    return n.toString(2).match(/1/g).length;\r\n}\r\n\r\n$('form button').on('click', function () {\r\n    loadingSpinner.removeClass('d-none');\r\n    const game = $('#game').val();\r\n    const ball = getJsonValue($('#ball'));\r\n    const catchRate = getIntValue($('#catchRate'));\r\n    const currentHP = getIntValue($('#currentHP'));\r\n    const maxHP = getIntValue($('#maxHP'));\r\n    const status = getIntValue($('#status'));\r\n\r\n    const currentHPModifier = (currentHP / 4) >> 0;\r\n    let c1 = (((maxHP * 255) / ball.ballFactor) >> 0);\r\n    let c2 = (c1 / currentHPModifier) >> 0;\r\n    let hpFactor = Math.min(currentHPModifier > 0 ? c2 : c1, 255);\r\n    const catchRateData = {\r\n        \"catchRate\" : catchRate,\r\n        \"ballRerollCutoff\" : ball.ballRerollCutoff,\r\n        \"ballReroll1\": ball.reroll1,\r\n        \"ballReroll2\": ball.reroll2,\r\n        \"status\" : status,\r\n        \"hpFactor\" : hpFactor,\r\n        \"reroll1Count\" : gameSpecificCycleCounts[game][0],\r\n        \"reroll2Count\" : gameSpecificCycleCounts[game][1],\r\n        \"roll2Count\" : gameRoll2Counts[game]\r\n        + (bitCount(c1) + bitCount(c2)) * 144\r\n        + 48 * (status === 12) + 52 * (status === 25)\r\n        + 22308 + 60 * ([\"Ultra Ball\", \"Safari Ball\"].includes(ball.ballName)) + 48 * (\"Great Ball\" === ball.ballName)\r\n    }\r\n    const aBunchOfMath = new Promise((resolve, reject) => {\r\n        const catchRateWorker = new Worker('js/catchRateWorker.js');\r\n        catchRateWorker.onmessage = function (e) {\r\n            resolve(e.data);\r\n        }\r\n        catchRateWorker.postMessage(catchRateData);\r\n    });\r\n\r\n    aBunchOfMath.then(result => {\r\n        let actualRate = result[0];\r\n        let intendedRate = result[1];\r\n        loadingSpinner.addClass('d-none');\r\n        setRateBar(actualRateBar, actualRate / 41943.04);\r\n        setRateBar(intendedRateBar, 100 * intendedRate);\r\n    });\r\n});"]}