{"version":3,"sources":["index.js"],"names":["gameSpecificCycleCounts","RB","Y","gameRoll2Counts","actualRateBar","$","intendedRateBar","loadingSpinner","setRateBar","progressElement","percent","parseFloat","toFixed","find","html","css","attr","className","getJsonValue","$element","JSON","parse","val","getIntValue","parseInt","bitCount","n","toString","match","length","on","removeClass","pokemon","game","includes","name","catchRate","ball","level","currentHPPercent","status","Promise","all","Array","map","x","i","hpDV","maxHP","baseHP","currentHPModifier","Math","max","c1","ballFactor","c2","hpFactor","min","catchRateData","ballRerollCutoff","ballReroll1","reroll1","ballReroll2","reroll2","reroll1Count","reroll2Count","roll2Count","ballName","resolve","reject","catchRateWorker","Worker","onmessage","e","data","postMessage","createCatchRateWorker","then","results","actualRate","intendedRate","forEach","result","addClass","this","value"],"mappings":"AAAA,MAAMA,wBAA0B,CAC5BC,GAAI,CAAC,IAAK,KACVC,EAAG,CAAC,IAAK,MAEPC,gBAAkB,CACpBF,GAAI,EACJC,EAAG,KAEP,IAAIE,cAAgBC,EAAE,oBAClBC,gBAAkBD,EAAE,sBACpBE,eAAiBF,EAAE,mBAEvB,SAASG,WAAWC,EAAiBC,GACjCA,EAAUC,WAAWD,GAASE,QAAQ,GACtCH,EAAgBI,KAAK,UAAUC,KAAQJ,EAAH,KACpCD,EAAgBI,KAAK,iBAAiBE,IAAI,QAAYL,EAAH,KAAeM,KAAK,gBAAiBN,GAAS,GAAGO,UAAY,iBAAgBP,GAAW,GAAK,aAAe,aAGnK,SAASQ,aAAaC,GAClB,OAAOC,KAAKC,MAAMF,EAASG,OAG/B,SAASC,YAAYJ,GACjB,OAAOK,SAASL,EAASG,OAG7B,SAASG,SAAUC,GACf,OAAOA,EAAEC,SAAS,GAAGC,MAAM,MAAMC,OAGrCxB,EAAE,eAAeyB,GAAG,SAAS,WACzBvB,eAAewB,YAAY,UAE3B,MAAMC,EAAUd,aAAab,EAAE,aACzB4B,EAAO5B,EAAE,SAASiB,MACX,OAATW,GACI,CAAC,YAAa,aAAaC,SAASF,EAAQG,QAC5CH,EAAQI,UAAY,IAG5B,MAAMC,EAAOnB,aAAab,EAAE,UACtBiC,EAAQf,YAAYlB,EAAE,WACtBkC,EAAmBhB,YAAYlB,EAAE,aACjCmC,EAASjB,YAAYlB,EAAE,YA+B7BoC,QAAQC,IAAI,IAAIC,MAAM,KAAKC,IAAI,CAACC,EAAGC,IA7BnC,SAA+BC,GAC3B,MAAMC,GAAoC,GAAzBhB,EAAQiB,OAASF,GAAYT,EAAQ,KAAQ,GAAKA,EAAQ,GACrEY,EAAoBC,KAAKC,KAAQJ,GAAST,EAAmB,MAAS,GAAK,GAAM,EAAK,IAAM,GAClG,IAAIc,EAAgB,IAARL,EAAeX,EAAKiB,YAAe,EAC3CC,EAAMF,EAAKH,GAAsB,EACjCM,EAAWL,KAAKM,IAAIP,EAAoB,EAAIK,EAAKF,EAAI,KACzD,MAAMK,EAAgB,CAClBtB,UAAcJ,EAAQI,UACtBuB,iBAAqBtB,EAAKsB,iBAC1BC,YAAevB,EAAKwB,QACpBC,YAAezB,EAAK0B,QACpBvB,OAAWA,EACXgB,SAAaA,EACbQ,aAAiBhE,wBAAwBiC,GAAM,GAC/CgC,aAAiBjE,wBAAwBiC,GAAM,GAC/CiC,WAAe/D,gBAAgB8B,GACG,KAA/BR,SAAS4B,GAAM5B,SAAS8B,IACzB,IAAiB,KAAXf,GAAiB,IAAiB,KAAXA,GAC7B,MAAQ,GAAM,CAAC,aAAc,eAAeN,SAASG,EAAK8B,UAAa,IAAM,eAAiB9B,EAAK8B,WAEzG,OAAO,IAAI1B,QAAQ,CAAC2B,EAASC,KACzB,MAAMC,EAAkB,IAAIC,OAAO,yBACnCD,EAAgBE,UAAY,SAAUC,GAClCL,EAAQK,EAAEC,OAEdJ,EAAgBK,YAAYjB,KAIKkB,CAAsB9B,KAAK+B,KAAKC,IACrE,IAAIC,EAAa,EACbC,EAAe,EACnBF,EAAQG,SAAQ,SAAUC,GACtBH,GAAcG,EAAO,GACrBF,GAAgBE,EAAO,MAE3B3E,eAAe4E,SAAS,UACxB3E,WAAWJ,cAAe2E,EAAa,WACvCvE,WAAWF,gBAAiB,IAAM0E,EAAe,SAIzD3E,EAAE,UAAUyB,GAAG,UAAU,WACrBsD,KAAKC,MAAQlC,KAAKM,IAAIN,KAAKC,IAAIgC,KAAKC,MAAO,GAAI","file":"../js/index.js","sourcesContent":["const gameSpecificCycleCounts = {\r\n    RB: [520, 564],\r\n    Y: [516, 560]\r\n}\r\nconst gameRoll2Counts = {\r\n    RB: 0,\r\n    Y: 152\r\n}\r\nvar actualRateBar = $('.actualRateGroup');\r\nvar intendedRateBar = $('.intendedRateGroup');\r\nvar loadingSpinner = $('.spinner-border');\r\n\r\nfunction setRateBar(progressElement, percent) {\r\n    percent = parseFloat(percent).toFixed(2);\r\n    progressElement.find('p.rate').html(`${percent}%`);\r\n    progressElement.find('.progress-bar').css(\"width\", `${percent}%`).attr(\"aria-valuenow\", percent)[0].className = `progress-bar ${percent >= 50 ? 'bg-success' : 'bg-danger'}`;\r\n}\r\n\r\nfunction getJsonValue($element) {\r\n    return JSON.parse($element.val());\r\n}\r\n\r\nfunction getIntValue($element) {\r\n    return parseInt($element.val());\r\n}\r\n\r\nfunction bitCount (n) {\r\n    return n.toString(2).match(/1/g).length;\r\n}\r\n\r\n$('form button').on('click', function () {\r\n    loadingSpinner.removeClass('d-none');\r\n\r\n    const pokemon = getJsonValue($('#species'));\r\n    const game = $('#game').val();\r\n    if (game === \"RB\") {\r\n        if ([\"DRAGONAIR\", \"DRAGONITE\"].includes(pokemon.name)) {\r\n            pokemon.catchRate = 45;\r\n        }\r\n    }\r\n    const ball = getJsonValue($('#ball'));\r\n    const level = getIntValue($('#level'));\r\n    const currentHPPercent = getIntValue($('#hpRange'));\r\n    const status = getIntValue($('#status'));\r\n\r\n    function createCatchRateWorker(hpDV) {\r\n        const maxHP = (((pokemon.baseHP + hpDV) * 2 * level / 100) >> 0) + level + 10;\r\n        const currentHPModifier = Math.max(((((maxHP * (currentHPPercent / 100)) >> 0) / 4) >> 0) & 0xFF, 1);\r\n        let c1 = (((maxHP * 255) / ball.ballFactor) >> 0);\r\n        let c2 = (c1 / currentHPModifier) >> 0;\r\n        let hpFactor = Math.min(currentHPModifier > 0 ? c2 : c1, 255);\r\n        const catchRateData = {\r\n            \"catchRate\" : pokemon.catchRate,\r\n            \"ballRerollCutoff\" : ball.ballRerollCutoff,\r\n            \"ballReroll1\": ball.reroll1,\r\n            \"ballReroll2\": ball.reroll2,\r\n            \"status\" : status,\r\n            \"hpFactor\" : hpFactor,\r\n            \"reroll1Count\" : gameSpecificCycleCounts[game][0],\r\n            \"reroll2Count\" : gameSpecificCycleCounts[game][1],\r\n            \"roll2Count\" : gameRoll2Counts[game]\r\n            + (bitCount(c1) + bitCount(c2)) * 144\r\n            + 48 * (status === 12) + 52 * (status === 25)\r\n            + 22308 + 60 * ([\"Ultra Ball\", \"Safari Ball\"].includes(ball.ballName)) + 48 * (\"Great Ball\" === ball.ballName)\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const catchRateWorker = new Worker('js/catchRateWorker.js');\r\n            catchRateWorker.onmessage = function (e) {\r\n                resolve(e.data);\r\n            }\r\n            catchRateWorker.postMessage(catchRateData);\r\n        });\r\n    }\r\n\r\n    Promise.all([...Array(16)].map((x, i) => createCatchRateWorker(i))).then(results => {\r\n        let actualRate = 0;\r\n        let intendedRate = 0;\r\n        results.forEach(function (result) {\r\n            actualRate += result[0];\r\n            intendedRate += result[1];\r\n        });\r\n        loadingSpinner.addClass('d-none');\r\n        setRateBar(actualRateBar, actualRate / 671088.64);\r\n        setRateBar(intendedRateBar, 100 * intendedRate / 16);\r\n    });\r\n});\r\n\r\n$('#level').on('change', function () {\r\n    this.value = Math.min(Math.max(this.value, 2), 70);\r\n});"]}