{"version":3,"sources":["catchRateWorker.js"],"names":["onmessage","e","catchRate","ballRerollCutoff","ballReroll1","ballReroll2","status","hpFactor","reroll1Count","reroll2Count","roll2Count","data","intendedRate","Math","min","actualSuccesses","initialRNGByte","initialDividerWord","currentDividerWord","currentRNGByte","postMessage","close"],"mappings":"AAAAA,UAAY,SAAUC,GAClB,MAAMC,UAACA,EAASC,iBAAEA,EAAgBC,YAAEA,EAAWC,YAAEA,EAAWC,OAAEA,EAAMC,SAAEA,EAAQC,aAAEA,EAAYC,aAAEA,EAAYC,WAAEA,GAAcT,EAAEU,KACtHC,EAAeN,EAASH,EAAmBU,KAAKC,IAAIZ,EAAY,EAAGC,EAAmBG,GAAUH,GAAoBI,EAAW,GAAK,IAE1I,IADA,IAAIQ,EAAkB,MAAQT,EACrBU,EAAiBV,EAAQU,EAAiB,IAAKA,IACpD,IAAK,IAAIC,EAAqB,EAAGA,EAAqB,MAAOA,GAAsB,EAAG,CAGlF,IAFA,IAAIC,EAAqBD,EACrBE,EAAiBH,IACT,CACR,GAAIZ,GAAee,EAAiB,IAChCD,EAAsBA,EAAqBV,EAAgB,UAE1D,CAAA,KAAIH,GAAec,EAAiB,KAGrC,MAFAD,EAAsBA,EAAqBT,EAAgB,MAI/DU,EAAkBA,GAAkBD,IAAuB,GAAK,EAAK,IAGtEC,EAAiBb,EAChBS,IAEMI,EAAiBb,GAAWJ,IAGlCa,IADAI,EAAkBA,IADlBD,EAAsBA,EAAqBR,EAAc,SACE,GAAM,MAC5BH,GAIjDa,YAAY,CAACL,EAAiBH,IAC9BS","file":"../js/catchRateWorker.js","sourcesContent":["onmessage = function (e) {\r\n    const {catchRate, ballRerollCutoff, ballReroll1, ballReroll2, status, hpFactor, reroll1Count, reroll2Count, roll2Count} = e.data;\r\n    const intendedRate = status / ballRerollCutoff + Math.min(catchRate + 1, ballRerollCutoff - status) / ballRerollCutoff * (hpFactor + 1) / 256;\r\n    var actualSuccesses = 16384 * status;\r\n    for (var initialRNGByte = status; initialRNGByte < 256; initialRNGByte++) {\r\n        for (var initialDividerWord = 0; initialDividerWord < 65536; initialDividerWord += 4) {\r\n            var currentDividerWord = initialDividerWord;\r\n            var currentRNGByte = initialRNGByte;\r\n            while(true) {\r\n                if (ballReroll1 && currentRNGByte > 200) {\r\n                    currentDividerWord = (currentDividerWord + reroll1Count) & 0xFFFF;\r\n                }\r\n                else if (ballReroll2 && currentRNGByte > 150) {\r\n                    currentDividerWord = (currentDividerWord + reroll2Count) & 0xFFFF;\r\n                } else {\r\n                    break;\r\n                }\r\n                currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8) + 1) & 0xFF;\r\n            }\r\n\r\n            if(currentRNGByte < status) {\r\n                actualSuccesses ++;\r\n            }\r\n            else if ((currentRNGByte - status) <= catchRate) {\r\n                currentDividerWord = (currentDividerWord + roll2Count) & 0xFFFF;\r\n                currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                actualSuccesses += currentRNGByte <= hpFactor;\r\n            }\r\n        }\r\n    }\r\n    postMessage([actualSuccesses, intendedRate]);\r\n    close();\r\n}"]}